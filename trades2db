#!/usr/bin/env python

import argparse
from datetime import datetime
import os
from time import time, sleep
import shortuuid

from sqlalchemy import and_, or_, func
from sqlalchemy.orm import joinedload
from sqlalchemy import create_engine
from sqlalchemy.orm import Session

import config as cfg
from model import Market, Asset, FeeSchedule, Trade

DAEMON_WAIT_SECS = 1

"""
1. read trades dir
2. compute ledgers
3. insert into db

"""

class Trades2Db():
    def __init__(self):
        self.engine = create_engine(cfg.DB_CONN)
        db = self.session = Session(self.engine)

        self.markets = {}
        self.market = None

        q = db.query(
            Market
        ).options(
            joinedload(Market.asset, innerjoin=True),
            joinedload(Market.uoa, innerjoin=True)
        )
        for m in q.all():
            self.markets[m.code] = m
        all_markets = self.markets.keys()

        parser = argparse.ArgumentParser(description='Trades2Db')
        parser.add_argument('market', choices=all_markets)
        parser.add_argument('-v', '--verbose', action='store_true')
        parser.add_argument('-d', '--daemon', type=float, nargs='?',
            const=DAEMON_WAIT_SECS, help='Run in loop', metavar='secs')

        args = parser.parse_args()

        self.main(args)

    def main(self, args):
        market = self.market = self.markets[args.market]
        self.trades_dir = cfg.CACHE_DIR / market.code / 'trades'

        # Main loop
        while True:
            s1 = time()
            count = self.run()
            if not args.daemon:
                break
            elapsed = time() - s1
            print('%d trades in %.2f ms. Sleep %.2f seconds.' % (
                count, elapsed * 1000, args.daemon))
            sleep(args.daemon)

    def run(self):
        count = 0
        self.files = []
        self.trades = []
        self.ledgers = []
        for fname in sorted(os.listdir(self.trades_dir)):
            self.files.append(fname)
            rows = []
            # It is expected that each of these files contains data
            # for a small period of time (1-5 seconds worth), therefore
            # they will fit into memory.
            #print('Processing', fname, '..')
            fpath = self.trades_dir / fname
            with open(fpath) as f:
                for line in f.readlines():
                    line = line.strip()
                    rows.append(line.split(','))
            if len(rows) == 0:
                raise Exception(
                    'no rows in file:'+self.market.code+'/'+fname)
            for row in rows:
                (time, price, qty, maker, taker) = row
                #print(time,price,qty,maker,taker)
                ts = int(int(time) / 1000000)

                t = Trade(
                    uuid        = shortuuid.uuid(),
                    created     = datetime.utcfromtimestamp(ts),
                    market_id   = self.market.id,
                    price       = price,
                    amount      = qty,
                )
                #foo = dict(t.__dict__)
                #del foo['_sa_instance_state']
                #print(foo)
                self.trades.append(t)
            #print()
            if len(self.trades) > 1000:
                #print('flush..')
                count += self.flush()


        # End flush
        if len(self.trades) > 0:
            #print('End flush..')
            count += self.flush()
        return count

    def flush(self):
        # commit
        count = len(self.trades)
        if self.trades:
            s = self.session
            try:
                s.bulk_save_objects(self.trades)
                s.commit()
                # remove files from disk
                for fname in self.files:
                    fpath = self.trades_dir / fname
                    #print('os.remove('+fname+')')
                    os.remove(fpath)
            except:
                s.rollback()
                raise
            finally:
                pass
                #s.close()
            self.files = []
            self.trades = []
            self.ledgers = []
        return count

if __name__ == '__main__':
    Trades2Db()

