#!/usr/bin/env python

import argparse
import csv
import shutil
import time

from sqlalchemy import create_engine, and_, or_, func
from sqlalchemy.orm import Session, joinedload

from config import DT_FORMAT, SQL, DATA_DIR, CACHE_DIR, CSV_OPTS
import model
from model import (Account, Market, Asset, Event, Order, Trade, Ledger)
from ohlc import OHLC
from event import EventRunner


#import logging
#logging.basicConfig()
#logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)

ENTITY = model.tables()

IMPORT_EXPORT_ENTITIES = ('asset','market','account')

class Main():
    def __init__(self):
        self.engine = create_engine('sqlite:///mockex.db')
        self.session = Session(self.engine)

        parser = argparse.ArgumentParser(description='Import utility')
        parser.add_argument("action", choices=[
            'import', 'export', 'events',

            'ohlc',

            'daemon',

            'reset'
        ], help="Action")

        parser.add_argument("--entity",  help="entity")

        # For maker
        parser.add_argument('--source')
        parser.add_argument('--speed')
        parser.add_argument('--volume')
        parser.add_argument('--pattern')

        # For ohlc
        parser.add_argument('-s', "--stream",  action='store_true')
        parser.add_argument('-m', "--market")


        parser.add_argument('-v', '--verbose', action='store_true')

        self.args = parser.parse_args()
        getattr(self, 'cmd_' + self.args.action)(self.args)

    def cmd_daemon(self, args):
        while True:
            EventRunner(self.session).run()
            OHLC(self.session).generate_cache(None, True)
            print('Sleeping %d seconds.' % 2)
            time.sleep(2)
        # run batch of events
        # then run ohlc -s

    def cmd_events(self, args):
        EventRunner(self.session).run()

    def cmd_export(self, args):
        ser = IMPORT_EXPORT_ENTITIES if 'all' == args.entity else [args.entity]
        for e in ser:
            print('Export',e,'.. ', end='')
            Entity = ENTITY[e]
            q = self.session.query(Entity)
            file = DATA_DIR / (e + '.csv')
            with open(file, 'w') as csvfile:
                writer = csv.writer(csvfile, **CSV_OPTS)
                header = Entity.__table__.columns.keys()

                writer.writerow(header)
                cnt = 0
                for record in q.all():
                    writer.writerow([getattr(record, c) for c in header ])
                    cnt += 1
                print(cnt, 'rows')

    def cmd_import(self, args):
        ser = IMPORT_EXPORT_ENTITIES if 'all' == args.entity else [args.entity]
        for e in ser:
            print('Import',e,'.. ', end='')
            Entity = ENTITY[e]
            file = DATA_DIR / (e + '.csv')
            with open(file) as csvfile:
                reader = csv.DictReader(csvfile, **CSV_OPTS)

                # Clean table
                deleted = self.session.query(Entity).delete()
                self.session.commit()

                cnt = 0
                for row in reader:
                    self.session.add(Entity(**row))
                    cnt += 1
                self.session.commit()
                print(cnt, 'rows imported')

    def cmd_ohlc(self, args):
        OHLC(self.session).generate_cache(args.market, args.stream)

    def cmd_reset(self, args):
        db = self.session

        m = db.query(Market).filter_by(
            code=args.market).one_or_none()
        if not m:
            print(args.market, 'not found.')
            return

        db.query(Order).filter_by(market_id=m.id).delete()
        db.query(Trade).filter_by(market_id=m.id).delete()
        db.commit()

        shutil.rmtree(CACHE_DIR / m.code)


if __name__ == '__main__':
    Main()

