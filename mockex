#!/usr/bin/env python

import argparse
from time import time, sleep

from sqlalchemy import and_, or_, func
from sqlalchemy.orm import joinedload
from sqlalchemy import create_engine
from sqlalchemy.orm import Session

import redis
import lmdb

import config as cfg
from lob.orderbook import OrderBook, Quote
from model import Market, Asset, FeeSchedule, Event
from redis_queue import SimpleQueue

DAEMON_WAIT_SECS = 1

class OrderBookRunner():
    def __init__(self):
        self.engine = create_engine(cfg.DB_CONN)
        db = self.session = Session(self.engine)
        self.r = redis.from_url(cfg.RQ_CONN)

        self.markets = {}
        self.market = None

        q = db.query(
            Market
        ).options(
            joinedload(Market.asset, innerjoin=True),
            joinedload(Market.uoa, innerjoin=True)
        )
        for m in q.all():
            self.markets[m.code] = m
        all_markets = self.markets.keys()

        self.assets = {}
        for a in db.query(Asset).all():
            self.assets[a.id] = a


        parser = argparse.ArgumentParser(description='Mock Exchange')
        parser.add_argument('market', choices=all_markets)
        parser.add_argument('-v', '--verbose', action='store_true')
        parser.add_argument('-b', '--book', action='store_true',
            help='Print book to stdout')
        parser.add_argument('-d', '--daemon', type=float, nargs='?',
            const=DAEMON_WAIT_SECS, help='Run in loop', metavar='secs')

        args = parser.parse_args()

        self.main(args)

    def main(self, args):
        market = self.market = self.markets[args.market]

        trades_dir = cfg.CACHE_DIR / market.code / 'trades'
        db_path = str(cfg.CACHE_DIR / market.code / cfg.LOB_LMDB_NAME)
        env = lmdb.open(db_path, max_dbs=3, map_size=cfg.LOB_LMDB_SIZE)
        self.lob = OrderBook(env, trades_dir)

        if args.book:
            self.lob.dump_book()
            return

        # Main loop
        while True:
            self.run()
            if not args.daemon:
                self.lob.flush()
                break
            print('Wait %.2f seconds.' % args.daemon)
            sleep(args.daemon)

    def run(self):
        ttime = 0
        order_cnt = 0
        trade_cnt = 0

        queue = SimpleQueue(self.r, self.market.code)
        cnt = 0
        while queue.get_length() > 0:
            cnt += 1
            idnum, method, payload = queue.dequeue()
            if method == 'add-order':
                quote = Quote(payload)

                start = time()

                trades, orderInBook = self.lob.processOrder(quote)
                self.lob.check_flush()

                order_cnt += 1
                trade_cnt += len(trades)

                ttime += time() - start
            elif method == 'cancel-order':
                pass
            elif method == 'amend-order':
                pass
            else:
                raise Exception('Invalid method: ' + str(method))

        start = time()
        self.lob.check_flush()
        ttime += time() - start

        self.lob.dump_history()
        print('orders: %-8d trades: %-8d time: %.2f ms   orders/sec:%-8d' % (
            order_cnt, trade_cnt, ttime, order_cnt / ttime))


if __name__ == '__main__':
    OrderBookRunner()

