#!/usr/bin/env python

import argparse
import csv
import os
import shutil
import sys
import time
from datetime import datetime
from sqlalchemy import create_engine, and_, or_, func
from sqlalchemy.orm import Session, joinedload

from config import DT_FORMAT, SQL, DATA_DIR, CACHE_DIR, CSV_OPTS
import model
from model import (Account, Market, Asset, Event, Order, Trade, Ledger)
from ohlc import OHLC
from event import EventRunner


#import logging
#logging.basicConfig()
#logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)

DAEMON_WAIT_SECS = 2.0

ENTITY = model.tables()

IMPORT_EXPORT_ENTITIES = ('asset','market','account')

class Main():
    def __init__(self):
        self.engine = create_engine('sqlite:///mockex.db')
        db = self.session = Session(self.engine)

        markets = [m.code for m in db.query(Market).all()] + ['all']

        parser = argparse.ArgumentParser(description='Mock Exchange')
        parser.add_argument('-v', '--verbose', action='store_true')

        subparsers = parser.add_subparsers(dest='command', help='Commands')

        t_parent = argparse.ArgumentParser(add_help=False)
        t_parent.add_argument('-t', '--tables',
            choices=ENTITY.keys(), nargs='+', default=['all'])

        d_parent = argparse.ArgumentParser(add_help=False)
        d_parent.add_argument('-d', '--daemon', type=float, nargs='?',
            const=DAEMON_WAIT_SECS,
            help='Run in loop', metavar='secs')

        m_parent = argparse.ArgumentParser(add_help=False)
        m_parent.add_argument('-m', '--markets', nargs='+', choices=markets,
            default=['all'],
            help='Markets')

        f_parent = argparse.ArgumentParser(add_help=False)
        f_parent.add_argument('-f', '--force', action='store_true',
            help='Force overwrite')


        init_parser = subparsers.add_parser('init',
            parents=[m_parent, f_parent],
            help='Init market cache (ohlc)')
        clear_parser = subparsers.add_parser('clear',
            parents=[m_parent, f_parent],
            help='Clear market data (db and cache)')

        ohlc_parser = subparsers.add_parser('ohlc',
            parents=[d_parent, m_parent],
            help='Update ohlc cache')
        events_parser = subparsers.add_parser('events',
            parents=[d_parent, m_parent],
            help='Run events')
        start_parser = subparsers.add_parser('start',
            parents=[d_parent, m_parent],
            help='Start daemon')

        import_parser = subparsers.add_parser('import', parents=[t_parent],
            help='Import tables')
        export_parser = subparsers.add_parser('export', parents=[t_parent],
            help='Export tables')


        args = parser.parse_args()

        if args.command == 'start':
            args.daemon = True

        if not args.command:
            parser.print_help(sys.stderr)
            sys.exit(1)

        getattr(self, 'cmd_' + args.command)(args)

    def cmd_start(self, args):
        while True:
            # Not filtering by markets - run all.
            EventRunner(self.session).run()
            OHLC(self.session, args).update_cache()
            if not args.daemon:
                break
            print('Wait %.2f seconds.' % args.daemon)
            time.sleep(args.daemon)

    def cmd_events(self, args):
        while True:
            EventRunner(self.session).run()
            if not args.daemon:
                break
            print('Wait %.2f seconds.' % args.daemon)
            time.sleep(args.daemon)

    def cmd_init(self, args):
        OHLC(self.session, args).init_cache(args.markets, args.force)

    def cmd_ohlc(self, args):
        OHLC(self.session, args).update_cache(args.markets)

    def cmd_clear(self, args):
        db = self.session

        if not args.force:
            print('You are about to delete market data for:')
            print(' ',', '.join(args.markets))
            print('Are you sure? You must supply the --force flag')
            sys.exit(1)

        filters = []
        if 'all' not in args.markets:
            filters.append(Market.code.in_(args.markets))
        q = db.query(Market).filter(*filters)

        for m in q.all():
            print('Clearing market', m.name, 'data')
            db.query(Order).filter_by(market_id=m.id).delete()
            print('  delete orders')
            db.query(Trade).filter_by(market_id=m.id).delete()
            print('  delete trades')
            db.commit()

            d = CACHE_DIR / m.code
            if os.path.exists(d):
                print('  remove',str(d))
                shutil.rmtree(d)

    def cmd_export(self, args):
        ser = IMPORT_EXPORT_ENTITIES if 'all' in args.tables else args.tables
        for e in ser:
            print('Export',e,'.. ', end='')
            Entity = ENTITY[e]
            q = self.session.query(Entity)
            file = DATA_DIR / (e + '.csv')
            with open(file, 'w') as csvfile:
                writer = csv.writer(csvfile, **CSV_OPTS)
                header = Entity.__table__.columns.keys()

                writer.writerow(header)
                cnt = 0
                for record in q.all():
                    writer.writerow([getattr(record, c) for c in header ])
                    cnt += 1
                print(cnt, 'rows')

    def cmd_import(self, args):
        ser = IMPORT_EXPORT_ENTITIES if 'all' in args.tables else args.tables
        for e in ser:
            print('Import',e,'.. ', end='')
            Entity = ENTITY[e]
            file = DATA_DIR / (e + '.csv')
            with open(file) as csvfile:
                reader = csv.DictReader(csvfile, **CSV_OPTS)

                # Clean table
                deleted = self.session.query(Entity).delete()
                self.session.commit()

                cnt = 0
                for row in reader:
                    self.session.add(Entity(**row))
                    cnt += 1
                self.session.commit()
                print(cnt, 'rows imported')


if __name__ == '__main__':
    Main()

